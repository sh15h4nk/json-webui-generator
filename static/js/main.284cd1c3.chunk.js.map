{"version":3,"sources":["logo.svg","Rating.tsx","RatingControl.tsx","ratingControlTester.ts","Location.tsx","LocationControl.tsx","locationControlTester.ts","App.tsx","index.tsx"],"names":["Rating","id","value","updateValue","useState","hoverAt","setHoverAt","className","style","cursor","map","i","fullStars","onMouseOver","onMouseOut","onClick","withJsonFormsControlProps","data","handleChange","path","newValue","rankWith","scopeEndsWith","center","lat","lng","Location","draggable","setDraggable","position","setPosition","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","toggleDraggable","useCallback","d","Marker","ref","Popup","minWidth","MapContainer","zoom","scrollWheelZoom","height","width","TileLayer","attribution","url","useStyles","makeStyles","_theme","container","padding","title","textAlign","dataContent","display","justifyContent","borderRadius","backgroundColor","marginBottom","buttonLayout","button","margin","form","initialData","initialErrors","renderers","materialRenderers","tester","ratingControlTester","renderer","RatingControl","locationControlTester","LocationControl","App","classes","displayDataAsString","setDisplayDataAsString","jsonformsData","setJsonformsData","useEffect","JSON","stringify","validationErrors","setValidationErrors","recordErrors","errors","errorToFocus","React","generateFile","a","length","Object","keys","fileName","json","blob","Blob","type","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","console","log","scrollIntoView","behavior","block","comminutiesFiles","setCommunitiesFiles","fetch","then","response","communities","sort","forEach","comm","push","label","src","logo","alt","Grid","justify","spacing","item","sm","Typography","variant","options","onChange","community","loadData","Text","Button","color","dataPath","message","schema","uischema","cells","materialCells","validationMode","theme","createMuiTheme","overrides","MuiFormControl","root","ReactDOM","render","ThemeProvider","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.284cd1c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport { useState } from 'react';\n\ninterface RatingProps {\n  id?: string;\n  value: number;\n  updateValue: (newValue: number) => void;\n}\n\nexport const Rating: React.FC<RatingProps> = ({ id, value, updateValue }) => {\n  const [hoverAt, setHoverAt] = useState<number | null>(null);\n\n  return (\n    <div id='#/properties/rating' className='rating'>\n      <p>Rating:</p>\n      <span style={{ cursor: 'pointer' }}>\n        {[0, 1, 2, 3, 4].map((i) => {\n          const fullStars = hoverAt ?? value;\n\n          return (\n            <span\n              onMouseOver={() => setHoverAt(i + 1)}\n              onMouseOut={() => setHoverAt(null)}\n              onClick={() => updateValue(i + 1)}\n              key={`${id}_${i}`}\n            >\n              {i < fullStars ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </span>\n    </div>\n  );\n};\n","import { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    updateValue={(newValue: number) => handleChange(path, newValue)}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","// import LocationPicker from '@react-location-picker';\n\n// interface LocationProps {\n// \tid?: string;\n// \tvalue: Object;\n// \tupdateValue: (newValue: Object) => void;\n// }\n\n// const defaultPosition = {\n//   lat: 27.9878,\n//   lng: 86.9250\n// };\n\n// export class Location extends Component {\n//   constructor (props) {\n//     super(props);\n \n//     this.state = {\n//       address: \"Kala Pattar Ascent Trail, Khumjung 56000, Nepal\",\n//       position: {\n//          lat: 0,\n//          lng: 0\n//       }\n//     };\n \n//     // Bind\n//     this.handleLocationChange = this.handleLocationChange.bind(this);\n//   }\n \n//   handleLocationChange ({ position, address, places }) {\n \n//     // Set new location\n//     this.setState({ position, address });\n//   }\n \n//   render () {\n//     return (\n//       <div>\n//         <h1>{this.state.address}</h1>\n//         <div>\n//           <LocationPicker\n//             containerElement={ <div style={ {height: '100%'} } /> }\n//             mapElement={ <div style={ {height: '400px'} } /> }\n//             defaultPosition={defaultPosition}\n//             onChange={this.handleLocationChange}\n//           />\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport * as React from 'react';\nimport { Marker, Popup } from 'react-leaflet';\nimport { useState, useRef, useMemo, useCallback } from 'react';\n\nconst center = {\n  lat: 51.505,\n  lng: -0.09,\n}\n\nexport function Location() {\n  const [draggable, setDraggable] = useState(false)\n  const [position, setPosition] = useState(center)\n  const markerRef = useRef(null)\n  const eventHandlers = useMemo(\n    () => ({\n      dragend() {\n        const marker: any = markerRef.current;\n        if (marker != null) {\n          setPosition(marker.getLatLng())\n        }\n      },\n    }),\n    [],\n  )\n  const toggleDraggable = useCallback(() => {\n    setDraggable((d) => !d)\n  }, [])\n\n  return (\n    <Marker\n      draggable={draggable}\n      eventHandlers={eventHandlers}\n      position={position}\n      ref={markerRef}>\n      <Popup minWidth={90}>\n        <span onClick={toggleDraggable}>\n          {draggable\n            ? 'Marker is draggable'\n            : 'Click here to make marker draggable'}\n        </span>\n      </Popup>\n    </Marker>\n  )\n}\n\n\n\n\n\n\n\n\n","import * as React from 'react';\nimport { withJsonFormsControlProps } from \"@jsonforms/react\";\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { Location } from './Location';\n\nimport 'leaflet/dist/leaflet.css';\n\ninterface LocationControlProps {\n\tdata: any;\n\thandleChange(path: string, value: any): void;\n\tpath: string;\n}\nconst center = {\n  lat: 51.505,\n  lng: -0.09,\n}\n\nconst LocationControl = ({ data, handleChange, path }: LocationControlProps) => (\n\t<MapContainer center={center} zoom={13} scrollWheelZoom={false} style={{ height: '100vh', width: '100wh' }}>\n\t    <TileLayer\n\t      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n\t      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\t    />\n\t    <Location />\n  \t</MapContainer>\n);\n\nexport default withJsonFormsControlProps(LocationControl);","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n\t100,\n\tscopeEndsWith('lon')//location picker\n)","import { Fragment, useState, useEffect } from 'react';\nimport { JsonForms } from '@jsonforms/react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport logo from './logo.svg';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport {\n  materialCells,\n  materialRenderers,\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\n\nimport LocationControl from './LocationControl';\nimport locationControlTester from './locationControlTester';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Text } from 'react-native';\nimport * as React from 'react';\nimport Select from 'react-select'     \n\nconst useStyles = makeStyles((_theme) => ({\n  container: {\n    padding: '1em',\n    width: '100%',\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em',\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece',\n    marginBottom: '1rem',\n    padding: \"1rem\"\n  },\n  buttonLayout: {\n    display: 'flex',\n    justifyContent: 'center',\n    borderRadius: '0.25em',\n    marginBottom: '1rem',\n    padding: \"1rem\"\n  },\n  button: {\n    margin: 'auto',\n    display: 'block',\n  },\n  form: {\n    margin: 'auto',\n    padding: '1rem',\n  },\n}));\n\n\n//    Req. Parameters\n//initial Data of the jsonform\nconst initialData = {};\n//initla errors\nlet initialErrors: Array<{message: string, dataPath: string}> = [];\n\n//    Renderer set\nconst renderers = [\n  ...materialRenderers,\n  //register custom renderers\n  { tester: ratingControlTester, renderer: RatingControl },\n  { tester: locationControlTester, renderer: LocationControl },\n];\n\n//    Forms App\nconst App = () => {\n\n  const classes = useStyles();  //for user defined css styles\n\n  //    Form data hooks\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [jsonformsData, setJsonformsData] = useState<any>(initialData);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(jsonformsData, null, 2));\n  }, [jsonformsData]);\n\n\n  //   FormsData functions\n  //To clear the form data\n  const clearData = () => {\n    setJsonformsData({});\n  };\n\n  //    Validation Error Hooks\n  const [validationErrors, setValidationErrors] = useState(initialErrors);\n\n  //  ValidationErrors Functions\n  //to record the errors from event emmiter\n  let recordErrors = (errors: any) => {\n    setValidationErrors(errors);\n  }\n\n  //creating a refernce for validation error div\n  const errorToFocus = React.createRef<HTMLDivElement>();\n\n  //to validate the data and generate the json file\n  let generateFile = async () => {\n    if (validationErrors.length === 0 && Object.keys(jsonformsData).length !== 0) {\n      const fileName = \"yourapi\";\n      const json = JSON.stringify(jsonformsData);\n      const blob = new Blob([json],{type:'application/json'});\n      const href = await URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = href;\n      link.download = fileName + \".json\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      return console.log(\"generated\");\n    }\n    if(errorToFocus.current) errorToFocus.current.scrollIntoView({ behavior: \"smooth\", block: \"nearest\" })\n    console.log(\"Can't generate\");\n  }\n\n  //fetching all the API files\n  const [comminutiesFiles, setCommunitiesFiles ] = useState([]);\n  const fetchCommunities = () => {\n    fetch(\"https://raw.githubusercontent.com/freifunk/directory.api.freifunk.net/master/directory.json\")\n      .then(response => response.json())\n      .then(data => setCommunitiesFiles(data))\n  }\n  useEffect( () => {\n    fetchCommunities();\n  },[])\n  \n  //list of communities to select\n  const communities: Array<{value: string, label: string}> = []\n  Object.keys(comminutiesFiles).sort().forEach((comm)=> {\n    communities.push({ value: comm, label: comm})\n  })\n\n  //to load the data into the form\n  let loadData = (community: any) => {\n    // console.log(community.value)\n    fetch(\"https://freifunk.net/api/generator/php-simple-proxy/ba-simple-proxy.php?url=\"+comminutiesFiles[community.value])\n      .then(response => response.json())\n      .then(data => setJsonformsData(data['contents']))\n      // .then(con => console.log(con))\n    // setJsonformsData(comminutiesFiles[community.value]);\n  }\n\n  return (\n    <Fragment>\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <h1 className='App-title'>API Generator</h1>\n          <p className='App-intro'>More Forms. Less Code.</p>\n        </header>\n      </div>\n\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={6}>\n\n          <Typography variant={'h3'} className={classes.title}>\n            Load Data\n          </Typography>\n\n          <div className={classes.container}>\n            <Select\n              options={communities}\n              onChange={community => loadData(community)}\n            />\n          </div>\n\n          <Typography variant={'h3'} className={classes.title}>\n            Bound data\n          </Typography>\n\n          <div id='boundData' className={classes.dataContent}>\n            <Text>{displayDataAsString}</Text>\n          </div>\n\n          <div className={classes.buttonLayout}>\n            <Button\n              className={classes.button}\n              onClick={clearData}\n              color='primary'\n              variant='contained'\n            >\n              Clear data\n            </Button>\n          </div>\n\n          <div ref={errorToFocus}>\n            <Typography variant={'h3'} className={classes.title}>\n              Validation\n            </Typography>\n\n            <div className={classes.dataContent}>\n              <Text>{validationErrors.map(d => <li key= {d.dataPath}>{d.dataPath}:{d.message}</li>)}</Text>\n            </div>\n          </div>\n\n        </Grid>\n\n        <Grid item sm={6}>\n          <Typography variant={'h3'} className={classes.title}>\n            Generator form\n          </Typography>\n          <div className={classes.form}>\n            <Button\n              className={classes.button}\n              onClick={generateFile}\n              color='primary'\n              variant='contained'\n            >Generate API FILE</Button>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={jsonformsData}\n              renderers={renderers}\n              cells={materialCells}\n              validationMode={\"ValidateAndShow\"}\n              onChange={({ errors, data }) => {\n                  setJsonformsData(data);\n                  recordErrors(errors);\n                  if (Object.keys(jsonformsData).length === 0) recordErrors([]);\n                }\n              }\n            />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/**\n * Customize form so each control has more space\n */\nconst theme = createMuiTheme({\n  overrides: {\n    MuiFormControl: {\n      root: {\n        margin: '0.8em 0',\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}